packages:
  yum:
    nodejs: []
    npm: []

commands:
  01_install_nodejs:
    command: |
      # Verificar si Node.js está instalado
      if ! command -v node &> /dev/null; then
        echo "Installing Node.js..."
        sudo dnf install -y nodejs npm
      else
        echo "Node.js already installed: $(node --version)"
      fi
    ignoreErrors: false

  02_verify_nodejs:
    command: |
      echo "Node.js version: $(node --version)"
      echo "npm version: $(npm --version)"
      echo "Node.js path: $(which node)"
      echo "npm path: $(which npm)"
    ignoreErrors: false

  03_ensure_npx:
    command: |
      if ! command -v npx &> /dev/null; then
        echo "Installing npx..."
        sudo npm install -g npx
      else
        echo "npx already available: $(npx --version)"
      fi
    ignoreErrors: false

  04_preinstall_mcp_postgres:
    command: |
      echo "Pre-installing MCP PostgreSQL package..."
      # Pre-instalar el paquete MCP para evitar delays durante ejecución
      sudo npm install -g @modelcontextprotocol/server-postgres || echo "MCP package installation attempted"
    ignoreErrors: true

  05_mark_installed:
    command: |
      echo "Node.js installation completed at $(date)" > /tmp/nodejs_installed.txt
      echo "Available commands:"
      echo "  node: $(which node)"
      echo "  npm: $(which npm)"
      echo "  npx: $(which npx)"
    ignoreErrors: false

container_commands:
  01_set_permissions:
    command: |
      # Crear directorios necesarios y establecer permisos
      sudo mkdir -p /usr/local/bin
      sudo chmod 755 /usr/local/bin

      # Crear enlaces simbólicos para asegurar acceso
      sudo ln -sf /usr/bin/node /usr/local/bin/node || true
      sudo ln -sf /usr/bin/npm /usr/local/bin/npm || true
      sudo ln -sf /usr/bin/npx /usr/local/bin/npx || true

      # Establecer permisos correctos
      sudo chmod +x /usr/bin/node /usr/bin/npm /usr/bin/npx || true
      sudo chmod +x /usr/local/bin/node /usr/local/bin/npm /usr/local/bin/npx || true

      # Verificar permisos
      ls -la /usr/local/bin/node /usr/local/bin/npm /usr/local/bin/npx || true

      # Asegurar que el usuario webapp tenga acceso al directorio npm global
      sudo mkdir -p /usr/local/lib/node_modules
      sudo chown -R webapp:webapp /usr/local/lib/node_modules || true

      # Configurar PATH para el usuario webapp
      echo 'export PATH="/usr/local/bin:$PATH"' | sudo tee /etc/profile.d/nodejs.sh
      sudo chmod +x /etc/profile.d/nodejs.sh

    ignoreErrors: true

  02_test_mcp_availability:
    command: |
      # Verificar que el paquete MCP esté disponible
      echo "Testing MCP PostgreSQL availability..."

      # Probar diferentes formas de ejecutar npx
      echo "Testing with /usr/local/bin/npx:"
      /usr/local/bin/npx --version || echo "Failed with /usr/local/bin/npx"

      echo "Testing with /usr/bin/npx:"
      /usr/bin/npx --version || echo "Failed with /usr/bin/npx"

      echo "Testing with plain npx:"
      npx --version || echo "Failed with plain npx"

      # Verificar que el paquete MCP esté disponible
      echo "Testing MCP package availability:"
      /usr/local/bin/npx -y @modelcontextprotocol/server-postgres --version || echo "MCP package not available"

    ignoreErrors: true

  03_set_environment_variables:
    command: |
      # Establecer variables de entorno para la aplicación
      echo "Setting environment variables..."
      sudo mkdir -p /opt/elasticbeanstalk/deployment/env
      echo "NPX_COMMAND=/usr/local/bin/npx" | sudo tee /opt/elasticbeanstalk/deployment/env/NPX_COMMAND
      echo "PATH=/usr/local/bin:$PATH" | sudo tee -a /opt/elasticbeanstalk/deployment/env/PATH
    ignoreErrors: true

files:
  "/opt/elasticbeanstalk/hooks/appdeploy/post/99_nodejs_check.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      echo "Post-deploy Node.js verification:"
      echo "Node.js: $(node --version 2>/dev/null || echo 'Not found')"
      echo "npm: $(npm --version 2>/dev/null || echo 'Not found')"
      echo "npx: $(npx --version 2>/dev/null || echo 'Not found')"
      echo "PATH: $PATH"
      echo "Testing MCP package:"
      npx -y @modelcontextprotocol/server-postgres --version 2>/dev/null || echo "MCP package not available"

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/98_nodejs_permissions.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      echo "Setting up Node.js permissions..."

      # Asegurar que Node.js esté en PATH
      export PATH="/usr/local/bin:/usr/bin:$PATH"

      # Verificar y corregir permisos
      if [ -f /usr/bin/node ]; then
        chmod +x /usr/bin/node
        ln -sf /usr/bin/node /usr/local/bin/node
      fi

      if [ -f /usr/bin/npm ]; then
        chmod +x /usr/bin/npm
        ln -sf /usr/bin/npm /usr/local/bin/npm
      fi

      if [ -f /usr/bin/npx ]; then
        chmod +x /usr/bin/npx
        ln -sf /usr/bin/npx /usr/local/bin/npx
      fi

      # Crear directorio para módulos globales de npm
      mkdir -p /usr/local/lib/node_modules
      chown -R webapp:webapp /usr/local/lib/node_modules

      echo "Node.js permissions setup completed"

option_settings:
  aws:elasticbeanstalk:application:environment:
    NODEJS_VERSION: "20"
    NPX_COMMAND: "/usr/local/bin/npx"
    NODE_PATH: "/usr/local/lib/node_modules"
